using System.Collections.Generic;
using UnityEngine;
using TMPro;

public class ResourceUIManager : MonoBehaviour
{
    public static ResourceUIManager Instance { get; private set; }

    [SerializeField] private TextMeshProUGUI resourceText;
    [SerializeField] private float updateInterval = 1f; // –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ä–∞–∑ –≤ 1 —Å–µ–∫
    private float timer = 0f;

    private class ResourceData
    {
        public int amount;
        public float production;
        public float consumption;
        public bool hasBeenVisible; // –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ª–∏ –≤—Å–µ–≥–¥–∞ (–∫–∞–∫ —Ç–æ–ª—å–∫–æ —Ä–µ—Å—É—Ä—Å –ø–æ—è–≤–∏–ª—Å—è)
    }

    private readonly Dictionary<string, ResourceData> resources = new();

    private void Awake()
    {
        if (Instance != null && Instance != this)
        {
            Destroy(gameObject);
            return;
        }
        Instance = this;
    }

    private void Update()
    {
        timer += Time.deltaTime;
        if (timer >= updateInterval)
        {
            timer = 0f;
            UpdateUI();
        }
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç –¥–∞–Ω–Ω—ã–µ —Ä–µ—Å—É—Ä—Å–∞ (–∫–æ–ª-–≤–æ, –ø—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ, –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ)
    /// </summary>
    public void SetResource(string name, int amount, float prod = 0, float cons = 0)
    {
        if (!resources.ContainsKey(name))
            resources[name] = new ResourceData();

        var data = resources[name];
        data.amount = amount;
        data.production = prod;
        data.consumption = cons;

        // –ï—Å–ª–∏ –∫–æ–≥–¥–∞-—Ç–æ –±—ã–ª > 0 ‚Äî —Å—á–∏—Ç–∞–µ–º "—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã–º"
        if (amount > 0)
            data.hasBeenVisible = true;
    }

    /// <summary>
    /// –û–±–Ω–æ–≤–ª—è–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –≤—Å–µ—Ö —Ä–µ—Å—É—Ä—Å–æ–≤
    /// </summary>
    private void UpdateUI()
    {
        if (resourceText == null) return;

        string text = "";

        // üîπ Mood ‚Äî –≤—Å–µ–≥–¥–∞ –≤ –Ω–∞—á–∞–ª–µ
        if (resources.ContainsKey("Mood"))
        {
            var mood = resources["Mood"];
            text += $"<b>Mood {mood.amount}%</b>\n\n";
        }

        // üîπ –õ—é–¥–∏, —Ä–∞–±–æ—Ç–Ω–∏–∫–∏, —Å–≤–æ–±–æ–¥–Ω—ã–µ ‚Äî –æ—Å–æ–±—ã–π –±–ª–æ–∫
        int totalPeople = ResourceManager.Instance.GetResource("People");
        int assignedWorkers = ResourceManager.Instance.AssignedWorkers;
        int freeWorkers = ResourceManager.Instance.FreeWorkers;

        if (totalPeople > 0)
        {
            // –û–ø—Ä–µ–¥–µ–ª—è–µ–º, —Ö–≤–∞—Ç–∞–µ—Ç –ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –ª—é–¥–µ–π –¥–ª—è –≤—Å–µ—Ö –Ω—É–∂–¥
            // (–µ—Å–ª–∏ —Å–≤–æ–±–æ–¥–Ω—ã—Ö –º–µ–Ω—å—à–µ, —á–µ–º —Ç—Ä–µ–±—É–µ—Ç—Å—è —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–º—É –∑–¥–∞–Ω–∏—é)
            bool shortage = freeWorkers < 0 || ResourceManager.Instance.FreeWorkers < 0;

            string freeColor = shortage ? "red" : "green";

            text += $"<b>–õ—é–¥–∏:</b> {totalPeople}\n";
            text += $"‚Äî –†–∞–±–æ—Ç–Ω–∏–∫–∏: <color=yellow>{assignedWorkers}</color>\n";
            text += $"‚Äî –°–≤–æ–±–æ–¥–Ω—ã–µ: <color={freeColor}>{freeWorkers}</color>\n\n";
        }

        // üîπ –û—Å—Ç–∞–ª—å–Ω—ã–µ —Ä–µ—Å—É—Ä—Å—ã
        foreach (var kvp in resources)
        {
            if (kvp.Key == "Mood" || kvp.Key == "People") continue; // Mood –∏ People –æ—Ç–¥–µ–ª—å–Ω–æ

            var data = kvp.Value;

            // –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—Å—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∏–ª–∏ —Ä–µ—Å—É—Ä—Å —É–∂–µ –±—ã–ª –≤–∏–¥–µ–Ω
            if (data.amount <= 0 && !data.hasBeenVisible)
                continue;

            // —Ñ–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–∏—Ä–æ—Å—Ç–∞/–ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏—è
            string prodText = data.production > 0 ? $"; <color=green>+{data.production:F0}</color>" : "";
            string consText = data.consumption > 0 ? $"; <color=red>-{data.consumption:F0}</color>" : "";

            // —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º –±–∞–ª–∞–Ω—Å
            bool isDeficit = data.consumption > data.production;
            bool isBalanced = Mathf.Approximately(data.consumption, data.production) && data.consumption > 0;

            string resourceNameColored;

            if (isDeficit)
                resourceNameColored = $"<color=red>{kvp.Key}</color>";          // üî¥ –¥–µ—Ñ–∏—Ü–∏—Ç
            else if (isBalanced)
                resourceNameColored = $"<color=yellow>{kvp.Key}</color>";       // üü° –±–∞–ª–∞–Ω—Å
            else
                resourceNameColored = $"<color=white>{kvp.Key}</color>";        // ‚ö™ –ø—Ä–æ—Ñ–∏—Ü–∏—Ç –∏–ª–∏ –Ω–µ—Ç —Ä–∞—Å—Ö–æ–¥–∞

            text += $"{resourceNameColored} {data.amount}{prodText}{consText}\n";
        }

        resourceText.text = text;
    }
}
