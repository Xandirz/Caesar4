using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class InfoUI : MonoBehaviour
{
    public static InfoUI Instance;

    [SerializeField] private GameObject infoPanel; 
    [SerializeField] private TMP_Text infoText;    
    [SerializeField] private Button upgradeButton;

    private House currentHouse;
    private ProductionBuilding currentProduction;

    void Awake()
    {
        Instance = this;
        infoPanel.SetActive(false);
        if (upgradeButton != null)
            upgradeButton.gameObject.SetActive(false);
    }

    public void ShowInfo(PlacedObject po)
    {
        infoPanel.SetActive(true);
        currentHouse = null;
        currentProduction = null;

        string text = po.name;

        // üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Ä–æ–≥–∏
        if (!(po is Road))
        {
            string roadColor = po.hasRoadAccess ? "white" : "red";
            text += $"\n–î–æ—Ä–æ–≥–∞: <color={roadColor}>{(po.hasRoadAccess ? "–ï—Å—Ç—å" : "–ù–µ—Ç")}</color>";
        }

        // === üè† –î–û–ú ===
        if (po is House house)
        {
            currentHouse = house;

            string waterColor = house.HasWater ? "white" : "red";
            text += $"\n–í–æ–¥–∞: <color={waterColor}>{(house.HasWater ? "–ï—Å—Ç—å" : "–ù–µ—Ç")}</color>";
            text += $"\n–£—Ä–æ–≤–µ–Ω—å: {house.CurrentStage}";

            // üîπ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
            string consumptionText = "";
            foreach (var kvp in house.consumptionCost)
            {
                int available = ResourceManager.Instance.GetResource(kvp.Key);
                string color = available >= kvp.Value ? "white" : "red";
                consumptionText += $"<color={color}>{kvp.Key}:{kvp.Value}</color> ";
            }
            text += "\n–ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç: " + (string.IsNullOrEmpty(consumptionText) ? "–ù–µ—Ç" : consumptionText);

            // === üîπ –ö–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è ===
            upgradeButton.onClick.RemoveAllListeners();
            string costStr = "";

            if (house.CurrentStage == 1 && house.upgradeCostLevel2 != null && house.upgradeCostLevel2.Count > 0)
            {
                // === –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è 1‚Üí2 ===
                upgradeButton.gameObject.SetActive(true);
                upgradeButton.GetComponentInChildren<TMP_Text>().text = "–£–ª—É—á—à–∏—Ç—å (–¥–æ 2)";
                upgradeButton.onClick.AddListener(() => TryUpgradeHouse(house));

                foreach (var kvp in house.upgradeCostLevel2)
                {
                    int available = ResourceManager.Instance.GetResource(kvp.Key);
                    string color = available >= kvp.Value ? "white" : "red";
                    costStr += $"<color={color}>{kvp.Key}:{kvp.Value}</color> ";
                }

                text += $"\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è (–¥–æ 2): {costStr.Trim()}";
            }
            else if (house.CurrentStage == 2 && house.upgradeCostLevel3 != null && house.upgradeCostLevel3.Count > 0)
            {
                // === –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è 2‚Üí3 ===
                upgradeButton.gameObject.SetActive(true);
                upgradeButton.GetComponentInChildren<TMP_Text>().text = "–£–ª—É—á—à–∏—Ç—å (–¥–æ 3)";
                upgradeButton.onClick.AddListener(() => TryUpgradeHouse(house));

                string reqText = "\n<b>–¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è –¥–æ 3 —É—Ä–æ–≤–Ω—è:</b>";
                reqText += "\n- –î–æ—Å—Ç—É–ø –∫ –¥–æ—Ä–æ–≥–µ";
                reqText += "\n- –î–æ—Å—Ç—É–ø –∫ –≤–æ–¥–µ";

                foreach (var kvp in house.upgradeCostLevel3)
                {
                    int available = ResourceManager.Instance.GetResource(kvp.Key);
                    string color = available >= kvp.Value ? "white" : "red";
                    reqText += $"\n- <color={color}>{kvp.Key} √ó {kvp.Value}</color>";
                }

                text += reqText;
            }
            else
            {
                upgradeButton.gameObject.SetActive(false);
            }
        }

        // === üè≠ –ü–†–û–ò–ó–í–û–î–°–¢–í–û ===
        if (po is ProductionBuilding prod)
        {
            currentProduction = prod;

            string activeColor = prod.isActive ? "white" : "red";
            text += $"\n–ê–∫—Ç–∏–≤–Ω–æ: <color={activeColor}>{(prod.isActive ? "–î–∞" : "–ù–µ—Ç")}</color>";

            // üîπ –ü–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
            string consumptionText = "";
            bool anyMissing = false;

            if (prod.consumptionCost != null && prod.consumptionCost.Count > 0)
            {
                foreach (var kvp in prod.consumptionCost)
                {
                    int available = ResourceManager.Instance.GetResource(kvp.Key);
                    string color;
                    if (!prod.isActive && available < kvp.Value)
                    {
                        color = "red";
                        anyMissing = true;
                    }
                    else
                    {
                        color = available >= kvp.Value ? "white" : "red";
                    }
                    consumptionText += $"<color={color}>{kvp.Key}:{kvp.Value}</color> ";
                }
            }

            // üîπ –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ
            string productionText = "";
            foreach (var kvp in prod.production)
                productionText += $"\n–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç: <color=white>{kvp.Key} +{kvp.Value}/—Å–µ–∫</color>";

            text += productionText;
            text += "\n–ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç: " + (string.IsNullOrEmpty(consumptionText) ? "–ù–µ—Ç" : consumptionText);

            if (!prod.isActive && prod.consumptionCost.Count > 0 && anyMissing)
                text += "\n<color=red>‚ö† –ù–µ —Ä–∞–±–æ—Ç–∞–µ—Ç: –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç —Ä–µ—Å—É—Ä—Å–æ–≤!</color>";

            // === –ö–Ω–æ–ø–∫–∞ –∞–ø–≥—Ä–µ–π–¥–∞ ===
            if (prod.CurrentStage == 1 && prod.upgradeCost != null && prod.upgradeCost.Count > 0)
            {
                upgradeButton.gameObject.SetActive(true);
                upgradeButton.GetComponentInChildren<TMP_Text>().text = "Upgrade";
                upgradeButton.onClick.RemoveAllListeners();
                upgradeButton.onClick.AddListener(() => TryUpgradeProduction(prod));

                string costStr = "";
                foreach (var kvp in prod.upgradeCost)
                {
                    int available = ResourceManager.Instance.GetResource(kvp.Key);
                    string color = available >= kvp.Value ? "white" : "red";
                    costStr += $"<color={color}>{kvp.Key}:{kvp.Value}</color> ";
                }

                text += $"\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {costStr.Trim()}";
            }
            else if (currentHouse == null)
            {
                upgradeButton.gameObject.SetActive(false);
            }
        }

        infoText.text = text;
    }

    private void TryUpgradeHouse(House house)
    {
        if (house.TryUpgrade())
            ShowInfo(house);
    }

    private void TryUpgradeProduction(ProductionBuilding prod)
    {
        if (prod.TryUpgrade())
            ShowInfo(prod);
    }

    public void HideInfo()
    {
        infoPanel.SetActive(false);
        upgradeButton.gameObject.SetActive(false);
        currentHouse = null;
        currentProduction = null;
        infoText.text = "";
    }
}
