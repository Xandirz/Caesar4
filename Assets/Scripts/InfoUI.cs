using UnityEngine;
using TMPro;
using UnityEngine.UI;

public class InfoUI : MonoBehaviour
{
    public static InfoUI Instance;

    [SerializeField] private GameObject infoPanel; 
    [SerializeField] private TMP_Text infoText;    
    [SerializeField] private Button upgradeButton; // –∫–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è –¥–æ–º–∞

    private House currentHouse;

    void Awake()
    {
        Instance = this;
        infoPanel.SetActive(false); 

        if (upgradeButton != null)
            upgradeButton.gameObject.SetActive(false);

    }

 public void ShowInfo(PlacedObject po)
{
    infoPanel.SetActive(true);
    currentHouse = null;

    string text = po.name;

    if (!(po is Road))
        text += "\n–î–æ—Ä–æ–≥–∞: " + (po.hasRoadAccess ? "–ï—Å—Ç—å" : "–ù–µ—Ç");

    if (po is House house)
    {
        currentHouse = house;

        text += "\n–í–æ–¥–∞: " + (house.HasWater ? "–ï—Å—Ç—å" : "–ù–µ—Ç");
        text += "\n–£—Ä–æ–≤–µ–Ω—å: " + house.CurrentStage;

        // –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ
        string consumptionText = "";
        foreach (var kvp in house.consumptionCost)
            consumptionText += $"{kvp.Key}:{kvp.Value} ";
        text += "\n–ü–æ—Ç—Ä–µ–±–ª—è–µ—Ç: " + (consumptionText == "" ? "–ù–µ—Ç" : consumptionText);

        // –∫–Ω–æ–ø–∫–∞ —É–ª—É—á—à–µ–Ω–∏—è (—Ç–æ–ª—å–∫–æ –¥–ª—è Stage 1)
        if (house.CurrentStage == 1)
        {
            upgradeButton.gameObject.SetActive(true);
            upgradeButton.GetComponentInChildren<TMP_Text>().text = "Upgrade";
            upgradeButton.onClick.RemoveAllListeners();
            upgradeButton.onClick.AddListener(() => TryUpgradeHouse(house));

            // üîπ –¥–æ–±–∞–≤–ª—è–µ–º —Ü–µ–Ω—É –≤ —Ç–µ–∫—Å—Ç
            string costStr = "";
            foreach (var kvp in house.upgradeCost)
                costStr += $"{kvp.Key}:{kvp.Value} ";
            text += $"\n–¢—Ä–µ–±—É–µ—Ç—Å—è –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è: {costStr.Trim()}";
        }
        else
        {
            upgradeButton.gameObject.SetActive(false);
        }
    }
    else
    {
        upgradeButton.gameObject.SetActive(false);
    }

    if (po is ProductionBuilding prodBuilding)
    {
        text += "\n–ê–∫—Ç–∏–≤–Ω–æ: " + (prodBuilding.isActive ? "–î–∞" : "–ù–µ—Ç");

        string consumptionText = "";
        if (prodBuilding.consumptionCost != null && prodBuilding.consumptionCost.Count > 0)
        {
            foreach (var kvp in prodBuilding.consumptionCost)
                consumptionText += $"{kvp.Key}:{kvp.Value}  ";
        }

        string productionText = "";
        foreach (var kvp in prodBuilding.production)
        {
            productionText += $"\n–†–µ—Å—É—Ä—Å: {kvp.Key} (+{kvp.Value}/—Å–µ–∫)";
        }

        text += productionText +
                $"\n–¢—Ä–µ–±—É–µ—Ç—Å—è: {(string.IsNullOrEmpty(consumptionText) ? "–ù–µ—Ç" : consumptionText)}";
    }

    infoText.text = text;
}


    private void TryUpgradeHouse(House house)
    {
        if (house.TryUpgrade())
            ShowInfo(house);
    }

    public void HideInfo()
    {
        infoPanel.SetActive(false);
        upgradeButton.gameObject.SetActive(false);
        currentHouse = null;
        infoText.text = ""; // üîπ –æ—á–∏—â–∞–µ–º —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –Ω–µ –≤–∏—Å–µ–ª–∏ —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
    }
}
