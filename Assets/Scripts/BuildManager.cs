using System.Collections.Generic;
using UnityEngine;
using UnityEngine.EventSystems;

public class BuildManager : MonoBehaviour
{
    public GridManager gridManager;
    public RoadManager roadManager;
    public List<GameObject> buildingPrefabs;

    public enum BuildMode { None, Road, House, LumberMill, Demolish,Upgrade, Well, Warehouse, Berry, Rock, Clay, Pottery, Hunter,
        Tools, Clothes, Crafts, Furniture, Wheat, Flour, Sheep, Weaver, Dairy, Bakery, Beans, Brewery,
        Coal, CopperOre, Copper
    }
    private BuildMode currentMode = BuildMode.None;

    public BuildMode CurrentMode => currentMode;
    public void SetBuildMode(BuildMode mode) => currentMode = mode;
    public static BuildManager Instance { get; private set; }
    
    private Vector2Int? lastPlacedCell = null;



    private void Awake()
    {
        if (Instance == null) Instance = this;
        else Destroy(gameObject);
    }
    


   void Update()
{
    if (Input.GetMouseButtonDown(0) && currentMode != BuildMode.None)
    {
        if (EventSystem.current.IsPointerOverGameObject())
            return;

        if (currentMode == BuildMode.Demolish || currentMode == BuildMode.Upgrade)
        {
            Vector2Int cell = GetMouseCell();

            // –°–Ω–∞—á–∞–ª–∞ –æ—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            MouseHighlighter.Instance.ClearHighlights();

            // –ó–∞—Ç–µ–º —Å–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é –ø–æ–¥—Å–≤–µ—Ç–∫—É
            MouseHighlighter.Instance.CreateSingleHighlight(cell);
        }

        else
        {
            PlaceObject();
            lastPlacedCell = GetMouseCell();
        }
    }

    // --- —É–¥–µ—Ä–∂–∞–Ω–∏–µ –õ–ö–ú ---
    if (Input.GetMouseButton(0) && currentMode != BuildMode.None)
    {
        if (EventSystem.current.IsPointerOverGameObject())
            return;

        Vector2Int cell = GetMouseCell();

        if (lastPlacedCell == null || cell != lastPlacedCell.Value)
        {
            if (currentMode == BuildMode.Demolish)
            {
                MouseHighlighter.Instance.CreateSingleHighlight(cell);
                DemolishObject();
            }
            else if (currentMode == BuildMode.Upgrade) // üÜï –º–∞—Å—Å–æ–≤–æ–µ —É–ª—É—á—à–µ–Ω–∏–µ
            {
                MouseHighlighter.Instance.CreateSingleHighlight(cell);
                TryUpgradeObject(cell);
            }
            else
            {
                PlaceObject();
            }

            lastPlacedCell = cell;
        }
    }

    if (Input.GetMouseButtonUp(0))
    {
        lastPlacedCell = null;
        if (currentMode == BuildMode.Demolish || currentMode == BuildMode.Upgrade)
            MouseHighlighter.Instance.ClearHighlights();
    }

    if (Input.GetMouseButtonDown(1))
    {
        currentMode = BuildMode.None;
        MouseHighlighter.Instance.ClearHighlights();
    }
}

    private Vector2Int GetMouseCell()
    {
        Vector3 mw = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        mw.z = 0f;
        return gridManager.IsoWorldToCell(mw);
    }

    private void TryUpgradeObject(Vector2Int cell)
    {
        if (!gridManager.TryGetPlacedObject(cell, out var po) || po == null)
            return;

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø
        if (po is House house)
        {
            house.TryUpgrade();
        }
        else if (po is ProductionBuilding prod)
        {
            prod.TryUpgrade();
        }
        else
        {
            Debug.Log("–≠—Ç–æ—Ç –æ–±—ä–µ–∫—Ç –Ω–µ–ª—å–∑—è —É–ª—É—á—à–∏—Ç—å");
        }
    }

    
    
   void PlaceObject()
{
    Vector3 mw = Camera.main.ScreenToWorldPoint(Input.mousePosition);
    mw.z = 0f;
    Vector2Int origin = gridManager.IsoWorldToCell(mw);

    GameObject prefab = GetPrefabByBuildMode(currentMode);
    if (prefab == null) return;

    PlacedObject poPrefab = prefab.GetComponent<PlacedObject>();
    if (poPrefab == null) return;

    int sizeX = poPrefab.SizeX;
    int sizeY = poPrefab.SizeY;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏
    for (int x = 0; x < sizeX; x++)
    {
        for (int y = 0; y < sizeY; y++)
        {
            Vector2Int testPos = origin + new Vector2Int(x, y);
            if (!gridManager.IsCellFree(testPos))
                return;
        }
    }

    var cost = poPrefab.GetCostDict();
    if (!ResourceManager.Instance.CanSpend(cost))
    {
        Debug.Log("–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Ä–µ—Å—É—Ä—Å–æ–≤!");
        return;
    }

    // –£–±–∏—Ä–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ç–∞–π–ª—ã –ø–æ–¥ –≤—Å–µ–º –æ–±—ä–µ–∫—Ç–æ–º
    for (int x = 0; x < sizeX; x++)
        for (int y = 0; y < sizeY; y++)
            gridManager.ReplaceBaseTile(origin + new Vector2Int(x, y), null);

    // –í—ã—á–∏—Å–ª—è–µ–º –ø–æ–∑–∏—Ü–∏—é
    Vector3 pos = gridManager.CellToIsoWorld(origin);
    pos.x = Mathf.Round(pos.x * gridManager.pixelsPerUnit) / gridManager.pixelsPerUnit;
    pos.y = Mathf.Round(pos.y * gridManager.pixelsPerUnit) / gridManager.pixelsPerUnit;

    GameObject go = Instantiate(prefab, pos, Quaternion.identity);

    PlacedObject po = go.GetComponent<PlacedObject>();
    if (po == null) return;

    po.gridPos = origin;
    po.manager = gridManager;
    po.OnPlaced();

    if (go.TryGetComponent<SpriteRenderer>(out var sr))
        gridManager.ApplySorting(po.gridPos, po.SizeX, po.SizeY, sr, false, po is Road);


    ResourceManager.Instance.SpendResources(cost);

    // –ü–æ–º–µ—á–∞–µ–º –≤—Å–µ –∫–ª–µ—Ç–∫–∏ –∫–∞–∫ –∑–∞–Ω—è—Ç—ã–µ
    for (int x = 0; x < sizeX; x++)
        for (int y = 0; y < sizeY; y++)
            gridManager.SetOccupied(origin + new Vector2Int(x, y), true, po);

    if (po is Road road)
    {
        roadManager.RegisterRoad(origin, road);
        roadManager.RefreshRoadAndNeighbors(origin);
    }
    
    CheckEffects(po);
}
   
   
  


   public void CheckEffects(PlacedObject po)
   {
       if (!(po is Road)) // —É –¥–æ—Ä–æ–≥ —ç—Ç–æ –Ω–µ –Ω—É–∂–Ω–æ
       {
           bool hasAccess = false;

           for (int dx = 0; dx < po.SizeX && !hasAccess; dx++)
           {
               for (int dy = 0; dy < po.SizeY && !hasAccess; dy++)
               {
                   Vector2Int cell = po.gridPos + new Vector2Int(dx, dy);

                   Vector2Int[] neighbors =
                   {
                       cell + Vector2Int.up,
                       cell + Vector2Int.down,
                       cell + Vector2Int.left,
                       cell + Vector2Int.right
                   };

                   foreach (var n in neighbors)
                   {
                       if (roadManager.IsRoadAt(n)&& roadManager.IsConnectedToObelisk(n))
                       {
                           hasAccess = true;
                           break;
                       }
                   }
               }
           }

           po.hasRoadAccess = hasAccess;
       }

       if (po is Road road)
       {
           bool connected = roadManager.IsConnectedToObelisk(po.gridPos);
           road.isConnectedToObelisk = connected;
           
           roadManager.UpdateBuildingAccessAround(road.gridPos);
       }
       
       if (po is Well well)
       {
           int r = well.buildEffectRadius;
           Vector2Int c = well.gridPos;

           // –û–±–Ω–æ–≤–ª—è–µ–º –¥–æ–º–∞ –í–ù–£–¢–†–ò –∫–≤–∞–¥—Ä–∞—Ç–∞ —Ä–∞–¥–∏—É—Å–∞
           for (int dx = -r; dx <= r; dx++)
           {
               for (int dy = -r; dy <= r; dy++)
               {
                   Vector2Int p = c + new Vector2Int(dx, dy);
                   if (gridManager.TryGetPlacedObject(p, out var obj) && obj is House h)
                   {
                       h.SetWaterAccess(true);
                   }
               }
           }
       }
       else if (po is House house)
       {
           // –ò—â–µ–º –õ–Æ–ë–û–ô –∫–æ–ª–æ–¥–µ—Ü –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–∫—Ä—ã–≤–∞–µ—Ç –¥–æ–º –ø–æ —Ç–æ–º—É –∂–µ –ø—Ä–∞–≤–∏–ª—É –∫–≤–∞–¥—Ä–∞—Ç–∞
           bool hasWater = false;
           int searchRadius = 10; // —Ä–∞–∑—É–º–Ω–∞—è ¬´—Ä–∞–º–∫–∞¬ª –ø–æ–∏—Å–∫–∞ –≤–æ–∫—Ä—É–≥ –¥–æ–º–∞

           for (int dx = -searchRadius; dx <= searchRadius && !hasWater; dx++)
           {
               for (int dy = -searchRadius; dy <= searchRadius && !hasWater; dy++)
               {
                   Vector2Int p = house.gridPos + new Vector2Int(dx, dy);
                   if (gridManager.TryGetPlacedObject(p, out var obj) && obj is Well w)
                   {
                       if (IsInEffectSquare(w.gridPos, house.gridPos, w.buildEffectRadius))
                       {
                           house.SetWaterAccess(true);
                           hasWater = true;
                       }
                   }
               }
           }

           if (!hasWater)
               house.SetWaterAccess(false);
       }
   }

   private bool IsInEffectSquare(Vector2Int center, Vector2Int pos, int radius)
   {
       return Mathf.Abs(pos.x - center.x) <= radius &&
              Mathf.Abs(pos.y - center.y) <= radius;
   }
   
   private void CheckEffectsAfterDemolish(PlacedObject po)
   {
       if (po is Well well)
       {
           int r = well.buildEffectRadius;
           Vector2Int c = well.gridPos;

           // –ü–µ—Ä–µ–±–∏—Ä–∞–µ–º –¥–æ–º–∞, –∫–æ—Ç–æ—Ä—ã–µ –Ω–∞—Ö–æ–¥–∏–ª–∏—Å—å –≤ –∫–≤–∞–¥—Ä–∞—Ç–µ —Ä–∞–¥–∏—É—Å–∞ —Å–Ω–µ—Å—ë–Ω–Ω–æ–≥–æ –∫–æ–ª–æ–¥—Ü–∞
           for (int dx = -r; dx <= r; dx++)
           {
               for (int dy = -r; dy <= r; dy++)
               {
                   Vector2Int p = c + new Vector2Int(dx, dy);
                   if (gridManager.TryGetPlacedObject(p, out var obj) && obj is House h)
                   {
                       // –ü—Ä–æ–≤–µ—Ä—è–µ–º: –æ—Å—Ç–∞–ª—Å—è –ª–∏ –•–û–¢–Ø –ë–´ –æ–¥–∏–Ω –¥—Ä—É–≥–æ–π –∫–æ–ª–æ–¥–µ—Ü, –ø–æ–∫—Ä—ã–≤–∞—é—â–∏–π —ç—Ç–æ—Ç –¥–æ–º
                       bool stillHas = false;
                       int searchRadius = 10;

                       for (int sx = -searchRadius; sx <= searchRadius && !stillHas; sx++)
                       {
                           for (int sy = -searchRadius; sy <= searchRadius && !stillHas; sy++)
                           {
                               Vector2Int s = h.gridPos + new Vector2Int(sx, sy);
                               if (gridManager.TryGetPlacedObject(s, out var maybe) && maybe is Well otherWell)
                               {
                                   if (IsInEffectSquare(otherWell.gridPos, h.gridPos, otherWell.buildEffectRadius))
                                       stillHas = true;
                               }
                           }
                       }

                       h.SetWaterAccess(stillHas);
                   }
               }
           }
       }
       
       if (po is Road)
       {
           // ‚úÖ –Ω–æ–≤–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ—Ä–æ–≥
           Vector2Int origin = po.gridPos;
           Vector2Int[] neighbors =
           {
               origin + Vector2Int.up,
               origin + Vector2Int.down,
               origin + Vector2Int.left,
               origin + Vector2Int.right
           };

           foreach (var n in neighbors)
           {
               if (gridManager.TryGetPlacedObject(n, out var obj) && obj != null && !(obj is Road))
               {
                 CheckEffects(obj); 
               }
           }
       }
   }


    GameObject GetPrefabByBuildMode(BuildMode mode)
    {
        foreach (var p in buildingPrefabs)
        {
            var po = p.GetComponent<PlacedObject>();
            if (po != null && po.BuildMode == mode) return p;
        }
        return null;
    }

    void DemolishObject()
    {
        Vector3 mw = Camera.main.ScreenToWorldPoint(Input.mousePosition);
        mw.z = 0f;
        Vector2Int cell = gridManager.IsoWorldToCell(mw);

        // 1) –ï—Å–ª–∏ –∫–ª–µ—Ç–∫–∞ —Å–≤–æ–±–æ–¥–Ω–∞ ‚Äî —Å—Ä–∞–∑—É –≤—ã—Ö–æ–¥–∏–º
        if (gridManager.IsCellFree(cell))
        {
            Debug.Log("–ó–¥–µ—Å—å –Ω–∏—á–µ–≥–æ –Ω–µ—Ç!");
            return;
        }

        // 2) –£–∑–Ω–∞—ë–º, –∫–∞–∫–æ–π –æ–±—ä–µ–∫—Ç –∑–∞–Ω–∏–º–∞–µ—Ç –≠–¢–£ –∫–ª–µ—Ç–∫—É
        if (!gridManager.TryGetPlacedObject(cell, out var po) || po == null)
            return;

        if (po is Obelisk)
            return; // üö´ –Ω–µ–ª—å–∑—è —Å–Ω–æ—Å–∏—Ç—å –æ–±–µ–ª–∏—Å–∫
        
        // 3) –ë–µ—Ä—ë–º origin –∏ —Ä–∞–∑–º–µ—Ä –∏–º–µ–Ω–Ω–æ –∏–∑ –æ–±—ä–µ–∫—Ç–∞
        Vector2Int origin = po.gridPos;        // –ª–µ–≤—ã–π –≤–µ—Ä—Ö–Ω–∏–π —É–≥–æ–ª —Ç–≤–æ–µ–≥–æ 2√ó2
        int sizeX = po.SizeX;                  // —É —Å–∫–ª–∞–¥–∞ 2
        int sizeY = po.SizeY;                  // —É —Å–∫–ª–∞–¥–∞ 2

        // 4) –•—É–∫ –æ–±—ä–µ–∫—Ç–∞ (—Ä–µ—Ñ–∞–Ω–¥ —Ä–µ—Å—É—Ä—Å–æ–≤ –∏ —Ç.–ø.)
        po.OnRemoved();

        // 5) –û—Å–≤–æ–±–æ–∂–¥–∞–µ–º –í–°–ï –∫–ª–µ—Ç–∫–∏ –ø—Ä—è–º–æ—É–≥–æ–ª—å–Ω–∏–∫–∞ (0;0, 0;1, 1;0, 1;1)
        for (int dx = 0; dx < sizeX; dx++)
        {
            for (int dy = 0; dy < sizeY; dy++)
            {
                Vector2Int p = origin + new Vector2Int(dx, dy);
                gridManager.SetOccupied(p, false);
                gridManager.ReplaceBaseTile(p, gridManager.groundPrefab);
            }
        }

        // 6) –°–ø–µ—Ü-–ª–æ–≥–∏–∫–∞ –¥–ª—è –¥–æ—Ä–æ–≥
        if (po is Road)
            roadManager.UnregisterRoad(origin);

        // 7) –£–¥–∞–ª—è–µ–º –æ–±—ä–µ–∫—Ç –∏–∑ —Å—Ü–µ–Ω—ã
        CheckEffectsAfterDemolish(po);
        if (po is not Obelisk)
        {
            Destroy(po.gameObject);

        }
        
    }



}
